server:
  port: 8100
eureka:
  client:
    service-url:
      default-zone: http://localhost:8761/eureka # Configuracao opcional, do endereco da instancia do Eureka
resilience4j:
  bulkhead:
    instances:
      default: # Nome do Endpoint no controller
        max-concurrent-calls: 10 # Configuracao de quantidade de requisicoes concorrentes
  ratelimiter:
    instances:
      default: # Nome do Endpoint no controller
        limit-for-period: 2 # Quantidade de requisicoes que pode ser feita dentro de um determinado tempo
        limit-refresh-period: 10s # Limite de tempo que comporta a quantidade de requisicoes especificadas, 2 a cada 10 seg nesse caso
  retry:
    instances:
      foo-bar: # Nome do Endpoint no controller
        max-attempts: 5 # Configuracao para a quantidade de tentativas de envio da requisicao ser feita, podemos adiconar varios instancias do servico
        wait-duartion: 1s # Configuracao para o intervalo entre as requisicoes
        enable-exponential-backoff: true # Mais uma configuracao para o intervalo entre as requisicoes, com um intervalo progressivo
spring:
  application:
    name: book-service
  datasource: # Configuracao do banco de dados
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/book_service?useTimezone=true&serverTimezone=UTC
    username: root
    password: 23031990
  jackson: # Configuracao para serializacao dos beans
    serialization:
      FAIL_ON_EMPTY_BEANS: false # Estavamos tendo erro com beans vazios
    default-property-inclusion: non_null
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true # Nao utilizar em ambientes de producao, dev e etc, pois diminui a performance
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL5InnoDBDialect
  flyway: # Responsavel por organizar os scripts que sao executados no banco de dados
    url: jdbc:mysql://localhost:3306/
    schemas: book_service
    user: root
    password: 23031990
  sleuth:
    sampler:
      probability: 1.0 # Configuracao do percentual que deve ser feito log pelo Sleuth, 1.0 equivale a 100%, o ideal em ambientes de producao e de 0.05, 5%
springdoc:
  show-actuator: true
  api-docs: # Configuracao para o Gateway conseguir captar o Swagger desse servico
    path: book-service/v3/api-docs # Caminho do servico apos o load balancer(sem ter o 'book-service' replicado no path)
